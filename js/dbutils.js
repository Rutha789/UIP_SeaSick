////////////////////////////////////////////////////////////////////////////////
// dbutils.js
//
// A module which offers the loadDB function for loading .js databases.
//
// Also features misc. constants and functions relating to how various
// databases in use for our application should be loadad.
//
// Author: Love Waern
////////////////////////////////////////////////////////////////////////////////
"use strict";

////////////////////////////////////////////////////////////////////////////////
// DATABASE-SPECIFIC CONSTANTS AND FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

// The path for the drink database
const pathDrinkDB = "/js/beverages_eng.js";

// The variable name for the drink database
const varNameDrinkDB = "__DrinkDB";

// The path for the user database
const pathUserDB = "/js/DBLoaded.js";

// The variable name for the user database
const varNameUserDB = "__UserDB";

// Loads the script on the path. Once loaded,
// the callback will be called.
//
// This is an alternative to $.getScript that doesn't get stopped by
// the Same Origin Policy.
function loadScript(path, callback) {
    var script = document.createElement('script');
    script.onload = callback;
    script.src = path;
    document.head.appendChild(script);
}


// The function that is used to convert the user database as loaded from the .js file
// to something more suitable for UserSession.
//
// The converted UserDB will be a map {ids: {}, usernames: {}}.
// Both ids and usernames contain all users: in ids, the users are accessed by id,
// in usernames, the users are accessed by username.
//
// Each user is of the form they are in DBLoaded.js, with two additions:
//  1. they will also have the .id attribute as a synonym for user_id
//  2. they will also have a credit attribute. If there's an account for the user
//     in DBLoaded.js, then the credit will be set to creditSEK of that account
//      (interpreted as a User).
//     Otherwise, 'credit' will be set to null.
function convertUserDB (initUserDB) {
    let userDB = {ids: {}, usernames: {}};
    for (let initUser of initUserDB.users) {
        let user = {...initUser};
        user.id = user.user_id;
        user.credit = null;
        userDB.ids[user.id] = user;
        userDB.usernames[user.username] = user;
    }
    for (let account of initUserDB.account) {
        userDB.ids[account.user_id].credit = Number(account.creditSEK);
    }
    return userDB;
}

////////////////////////////////////////////////////////////////////////////////
// loadDB()
////////////////////////////////////////////////////////////////////////////////

// A map of (potentially completed) promises for loading databases.
// Keys are variable names for the databaes, values are maps
// '{promise: ..., result: ...}', where 'promise' is the promise generated by
// loadDB() for that database, and 'result' is the result of the promise
// if it has been completed, and undefined otherwise.
let __loadDBPromises = {};

// Asynchronously loads a database, given the path to the .js file, the
// name of the variable representing the database in that file,
// and a function to initialize that database.
//
// Defaults to loading the drink database if no arguments are provided.
//
// If you don't need to initialize the database, pass null as the third argument.
//
// This is safe to use multiple times; it will not reload any database
// already loaded using loadDB().
//
// This returns a promise.
// Promises represent asynchronous computations (computations that are happening
// in parallell) that are currently in progress.
// You can add actions onto the result of a promise by using .then().
// This promise simply loads the database. You can use .then() on this
// to add computations upon the result of that promise, which will be executed
// when the promise finishes (or has already finished).
// For more info, see:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
function loadDB(pathDB = pathDrinkDB,
                varName = "__DrinkDB",
                initializer = db => db.map(Drink.fromDBObject)) {
    // Memoization; future calls to loadDB() always returns the promise
    // created by the first call.
    // This is needed since we REALLY don't want to load the database multiple
    // times upon multiple calls to loadDB(), and the easy way to prevent
    // that without risking
    // race conditions is to simply return the originally created promise.
    if (varName in __loadDBPromises) {
        return __loadDBPromises[varName].promise;
    } else {
        // Initialize a spot in the map
        __loadDBPromises[varName] = {};
        let promise = new Promise(function(resolve, reject) {
            loadScript(pathDB, function () {
                // Once the database has been loaded,
                // we use "eval" on the database variable name
                // in order to get the database.
                let db = eval(varName);
                let result = undefined;
                // If an initializer has been provided..
                if (initializer !== null) {
                    // Run the initializer and set the final result
                    // to whatever the initializer returns, unless...
                    result = initializer(db);
                    // If the initializer returns undefined, we assume
                    // it has modified the database in-place.
                    // If so, the result is the original database.
                    if (typeof result === undefined) {
                        result = db;
                    }
                } else {
                    result = db;
                }
                // We have a result. Register it in __loadDBPromises,
                // and fulfill the promise.
                __loadDBPromises[varName].result = result;
                resolve(result);
            });
        });
        __loadDBPromises[varName].promise = promise;
        return promise;
    }
}

// A synchronous variant (doesn't return a promise) of loadDB()
// you can use when you're SURE the database has been loaded.
//
// Only use this when you're sure the database has been loaded (like inside
// a function that is only called once the promise returned by a loadDB()
// completes).
function loadedDB(varName = "__DrinkDB") {
    return __loadDBPromises[varName].result;
}
